<!DOCTYPE html>
<html>
  <head>
    <title>New Sails App</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/bower_components/bootstrap/dist/css/bootstrap.css">
    <link rel="stylesheet" href="/bower_components/angular-toastr/dist/angular-toastr.min.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->

    <script type="text/javascript">
    window.SAILS_LOCALS = { _csrf: "<%= _csrf %>"};
    </script>
  </head>



<body ng-app="HomepageModule" ng-controller="HomepageController" >
    <div class="container-fluid">

      <!-- Creates the navbar -->
        <nav class="navbar navbar-default navbar-inverse">
      
          <!-- This creates the mechanism for the collapse button -->
          <button type="button" class="navbar-toggle" data-toggle="collapse" ng-init="navCollapsed = true" ng-click="navCollapsed = !navCollapsed">
      
            <!-- This controls the number of lines in the image when the nav collapse -->
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>

          <!-- This is the brand on the left-hand side. -->
          <a class="navbar-brand" href="/#"> Trucknagar</a>
          <div class="collapse navbar-collapse" ng-class="!navCollapsed && 'in'">

          <!-- LOGIN FORM -->  
          <div class="navbar-right">

            <% if (req.session.me) { %>
                    <a href="/logout">Logout</a>
                <% } else { %>
                    <button type="button" ng-click="openLogin()">Login</button> | <a href="#" ng-click="openSignup()">Signup</a>
                <% } %>
              <input type="hidden" name="_csrf" value="<%= _csrf %>" />
          </div>
        </nav>
    </div>
    
      <div class="default-page">
            <div class="header">
                <h1 id="main-title" class="container"><%= __('A brand new app.') %></h1>
                <h3 class="container">You're looking at: <code><%= view.pathFromApp + '.' +view.ext %></code></h3>
                <% if (req.session.me) { %>
                    <a href="/logout">Logout</a>
                <% } else { %>
                    <a href="/login">Login</a> | <a href="/signup">Signup</a>
                <% } %>
            </div>
            <div class="main container clearfix">
                <!-- <h1>Getting started</h1>
                <p>Don't worry, we've got your back.</p> -->
                <h1>Basic Login With Sails</h1>

                <ul class="getting-started">
                    <li class="clearfix">
                        <div class="step">
                            <div class="sprite one"></div>
                            <h3>Generate a REST API.</h3>
                            <p>
                                Run <code>sails generate api user</code>.  This will create two files: a <a href="http://sailsjs.org/#!/documentation/concepts/ORM/Models.html">model</a> <code class="pocket">api/models/User.js</code> and a <a href="http://sailsjs.org/#!/documentation/concepts/Controllers">controller</a><code class="pocket">api/controllers/UserController.js</code>.
                            </p>
                        </div>
                    </li>
                    <li class="clearfix">
                        <div class="step">
                            <div class="sprite two"></div>
                            <h3>
                                Lift your app.
                            </h3>
                            <p>
                                Run <code>sails lift</code> to start up your app server.  If you visit <a target="_blank" href="http://localhost:1337/user"><code>http://localhost:1337/user</code></a> in your browser, you'll see a <a href="http://sailsjs.org/#!/documentation/reference/blueprint-api">WebSocket-compatible</a> user API.
                            </p>
                        </div>
                    </li>
                    <li class="clearfix">
                    </li>
                </ul>
                <div class="links">
                    <!-- <h3>Links</h3> -->
                </div>
            </div>
        </div>

        <!--SCRIPTS-->
        <script src="/js/dependencies/sails.io.js"></script>
        <script src="/bower_components/jquery/dist/jquery.js"></script>
        <script src="/bower_components/angular/angular.js"></script>
        <script src="/bower_components/angular-route/angular-route.js"></script>
        <script src="/bower_components/angular-bootstrap/ui-bootstrap.min.js"></script>
        <script src="/bower_components/angular-bootstrap/ui-bootstrap-tpls.min.js"></script>
        <script src="/bower_components/angular-toastr/dist/angular-toastr.min.js"></script>
        <script src="/bower_components/angularjs-compare-to-directive/compareto.js"></script>
        <script src="/js/public/signup/SignupModule.js"></script>
        <script src="/js/public/vehicle/SellVehicleModule.js"></script>
        <script src="/js/public/homepage/HomepageModule.js"></script>
        <script src="/js/public/homepage/HomepageController.js"></script>
        <script src="/js/public/signup/SignupController.js"></script>
        <script src="/js/public/vehicle/SellVehicleController.js"></script>
        <!--SCRIPTS END-->

        <script type="text/ng-template" id="myModalContent">
        <div class="modal-header">
            <h2 class="form-signin-heading">Create an account</h2>
        </div>
        <div class="modal-body">
        <!-- SIGNUP FORM --> 
        <form ng-submit="submitSignupForm()" id="sign-up-form" class="form-signin-modal" name="signup">
          <div class="row">

            <!-- N A M E -->

            <!-- checking whether the form "signup" with the "name" property is both $invalid AND $dirty.  If it is
            insert the "has-error" class on the input field (i.e. insert a red border around the input field)
            -->
            <div class="control-group form-group col-md-12"
            ng-class="{'has-error':signup.name.$invalid &&
                                  signup.name.$dirty}">
              <label>Your full name</label>

              <!-- For this input field make it required, and have a max length of 25 -->
              <input type="text" class="form-control" placeholder="e.g. Nikola Tesla" name="name" ng-model="signupForm.name" ng-maxlength="50" required>

              <!-- Also, if signup.name.$dirty is true, show the message depending upon the particular properties truthiness (e.g. required
              and/or maxlength) -->
              <span class="help-block has-error" ng-if="signup.name.$dirty">
                <span ng-show="signup.name.$error.required">Name is required.</span>
                <span ng-show="signup.name.$error.maxlength">The name cannot be more than 50 characters.</span>
              </span>
            </div>

            <!-- T I T L E -->

            <div class="control-group form-group col-md-12"
              ng-class="{'has-error':signup.mobileNumber.$invalid &&
                                    signup.mobileNumber.$dirty}">
              <label>Your Mobile Number</label>
              <input type="text" class="form-control" placeholder="e.g. Genius" name="mobileNumber" ng-model="signupForm.mobileNumber" ng-maxlength="10" ng-minlength="10" required>
              <span class="help-block has-error" ng-if="signup.mobileNumber.$dirty">
                <span ng-show="signup.mobileNumber.$error.required">Mobile Number is required.</span>
                <span ng-show="signup.mobileNumber.$error.maxlength">Mobile Number cannot be more than 10 numbers.</span>
                <span ng-show="signup.mobileNumber.$error.minlength">Mobile Number cannot be less than 10 numbers.</span>
              </span>
            </div>

            <!-- E M A I L -->

            <div class="control-group form-group col-md-12"
            ng-class="{'has-error':signup.email.$invalid &&
                                  signup.email.$dirty}">
              <label>Your email address</label>
              <input type="email" class="form-control" placeholder="nikola@tesla.com" name="email" ng-model="signupForm.email" required >
              <span class="help-block has-error" ng-if="signup.email.$dirty">
                <span ng-show="signup.email.$error.required">Email address is required.</span>
                <span ng-show="signup.email.$error.email">Not a valid email address.</span>
              </span>
            </div>

            <!-- P A S S W O R D -->

            <div class="control-group form-group col-md-6"
            ng-class="{'has-error':signup.password.$invalid &&
                                  signup.password.$dirty}">
              <label>Choose a password</label>
              <!-- Added the compareTo directive that compares the passowrds -->
              <input type="password" class="form-control" placeholder="at least 6 characters" name="password" ng-model="signupForm.password" id="password" required ng-minlength="6" compare-to="signupForm.confirmPassword" >
              <span class="help-block has-error" ng-if="signup.password.$dirty">
                <span ng-show="signup.password.$error.required">Password is required.</span>
                <span ng-show="signup.password.$error.minlength">Password must be at least 6 characters.</span>
              </span>
            </div>

            <!-- C O N F I R M  P A S S W O R D -->

            <div class="control-group form-group col-md-6">
              <label>Re-enter your password</label>
              <input type="password" class="form-control" placeholder="one more time" name="confirmation" ng-model="signupForm.confirmPassword" required>
              <span class="help-block has-error" ng-if="signup.confirmation.$dirty">
                <span ng-show="signup.password.$error.compareTo">Password must match.</span>
                <span ng-show="signup.confirmation.$error.required">Confirmation password is required.</span>
              </span>
            </div>
          </div>

          <br/>

          <!-- Disable signup button until the form has no errors -->
          <button class="btn btn-primary btn-lg btn-block" type="submit" ng-disabled="signup.$invalid">
            <span ng-show="!signupForm.loading">Create Account</span>
            <span class="overlord-loading-spinner fa fa-spinner" ng-show="signupForm.loading" ></span>
            <span ng-show="signupForm.loading">Preparing your new account...</span>
          </button>

          <input type="hidden" name="_csrf" value="<%= _csrf %>" />
        </form>
        </div>
    </script>


    <script type="text/ng-template" id="loginModalContent">
        <div class="modal-header">
            <h2 class="form-signin-heading">Login</h2>
        </div>
        <div class="modal-body">
        <!-- Login FORM --> 
        <form ng-submit="submitLoginForm()" id="login-up-form" class="form-signin-modal" name="login">
          <div class="row">

            <!-- E M A I L -->

            <div class="control-group form-group col-md-12"
            ng-class="{'has-error':login.email.$invalid &&
                                  login.email.$dirty}">
              <label>Your email address</label>
              <input type="email" class="form-control" placeholder="nikola@tesla.com" name="email" ng-model="loginForm.email" required >
              <span class="help-block has-error" ng-if="login.email.$dirty">
                <span ng-show="login.email.$error.required">Email address is required.</span>
                <span ng-show="login.email.$error.email">Not a valid email address.</span>
              </span>
            </div>

            <!-- P A S S W O R D -->

            <div class="control-group form-group col-md-6"
            ng-class="{'has-error':login.password.$invalid &&
                                  login.password.$dirty}">
              <label>Choose a password</label>
              <!-- Added the compareTo directive that compares the passowrds -->
              <input type="password" class="form-control" placeholder="at least 6 characters" name="password" ng-model="loginForm.password" id="password" required ng-minlength="6" >
              <span class="help-block has-error" ng-if="login.password.$dirty">
                <span ng-show="login.password.$error.required">Password is required.</span>
                <span ng-show="login.password.$error.minlength">Password must be at least 6 characters.</span>
              </span>
            </div>


          <!-- Disable login button until the form has no errors -->
          <button class="btn btn-primary btn-lg btn-block" type="submit" ng-disabled="login.$invalid">
            <span ng-show="!loginForm.loading">Login</span>
            <span class="overlord-loading-spinner fa fa-spinner" ng-show="loginForm.loading" ></span>
            <span ng-show="loginForm.loading">Loging In...</span>
          </button>

          <input type="hidden" name="_csrf" value="<%= _csrf %>" />
        </form>
        </div>
    </script>
    </body>
</html>
